INSERTION SORT 


#include <stdio.h>
void printArray(int arr[], int n) {
for (int i=0; i<n; i++)
printf("%d ", arr[i]);
printf("\n");
}
void readArray(int arr[], int n) {
for (int i=0; i<n; i++)
scanf("%d", &arr[i]);
 
}
// Function to perform Insertion Sort
void insertionSort(int arr[], int n) {
int i,j,key;
for(i = 1; i < n; i++) {
key = arr[i];
j = i - 1;
// Move elements greater than key one position ahead
while(j >= 0 && arr[j] > key) {
arr[j + 1] = arr[j];
j--;
}
arr[j + 1] = key;
}
}
int main() {
int arr[50] ;
int n;
 
printf("Enter the number of elements \n");
scanf("%d",&n);
printf("Enter the array elements\n");
readArray(arr,n);
 
printf("Original array: ");
printArray(arr, n);
insertionSort(arr, n);
printf("Sorted array: ");
printArray(arr, n);
return 0;
}









♦ QUICK SORT


#include <stdio.h>
void printArray(int arr[],int n){
for(int i=0;i<n;i++)
printf("%d "
,arr[i]);
printf("\n");
}
void readArray(int arr[],int n){
for(int i=0;i<n;i++)
scanf("%d"
,&arr[i]);
}
void swap(int *a,int *b){
int temp=*a;
*a=*b;
*b=temp;
}
int partition(int arr[],int low,int high){
int pivot=arr[low];
int i=low+1,j=high;
while(1){
while(i<=high&&arr[i]<=pivot)
i++;
while(j>=low&&arr[j]>pivot)
j--;
if(i<j)
swap(&arr[i],&arr[j]);
else
break;
}
swap(&arr[low],&arr[j]);
return j;
}
void quicksort(int arr[],int low,int high){
if(low<high){
int pivotIndex=partition(arr,low,high);
quicksort(arr,low,pivotIndex-1);
quicksort(arr,pivotIndex+1,high);
}
}
}
int main(){
int arr[50],n;
printf("Enter the number of elements\n");
scanf("%d"
,&n);
printf("Enter the array elements\n");
readArray(arr,n);
printf("Original array: ");
printArray(arr,n);
quicksort(arr,0,n-1);
printf("Sorted array: ");
printArray(arr,n);
return 0;






♦ MERGE SORT


#include <stdio.h>
void merge(int arr[], int left, int mid, int right){
int i,j,k;
int n1=mid-left+1;
int n2=right-mid;
int L[n1],R[n2];
for(i=0;i<n1;i++)L[i]=arr[left+i];
for(j=0;j<n2;j++)R[j]=arr[mid+1+j];
i=0;j=0;k=left;
while(i<n1&&j<n2){
if(L[i]<=R[j]){arr[k]=L[i];i++;}
else{arr[k]=R[j];j++;}
k++;
}
while(i<n1){arr[k]=L[i];i++;k++;}
while(j<n2){arr[k]=R[j];j++;k++;}
}
void mergeSort(int arr[], int left, int right){
if(left<right){
int mid=left+(right-left)/2;
mergeSort(arr,left,mid);
mergeSort(arr,mid+1,right);
merge(arr,left,mid,right);
}
}
void printArray(int arr[], int n){
for(int i=0;i<n;i++)printf("%d "
,arr[i]);
printf("\n");
}
void readArray(int arr[], int n){
for(int i=0;i<n;i++)scanf("%d"
,&arr[i]);
}
int main(){
int arr[50],n;
printf("Enter the number of elements\n");
scanf("%d"
,&n);
printf("Enter the array elements\n");
readArray(arr,n);
printf("Original array: ");
printArray(arr,n);
mergeSort(arr,0,n-1);
printf("Sorted array: ");
printArray(arr,n);
return 0;
}





